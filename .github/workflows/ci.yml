# SPDX-FileCopyrightText: 2025 Severen Redwood <sev@severen.dev>
# SPDX-License-Identifier: CC0-1.0

name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-formatting:
    name: Check formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Check formatting of Haskell source code with Ormolu
        uses: haskell-actions/run-ormolu@v17

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: check-formatting

    steps:
      - uses: actions/checkout@v5

      - name: Set up HLint
        uses: haskell-actions/hlint-setup@v2
        with:
          version: "3.8"

      - name: Lint Haskell source code with HLint
        uses: haskell-actions/hlint-run@v2
        with:
          path: '["app/", "src/", "tests/"]'
          fail-on: warning

  build:
    name: Build and test with GHC ${{ matrix.ghc-version }}
    runs-on: ubuntu-latest
    needs: check-formatting
    strategy:
      fail-fast: false
      matrix:
        ghc-version: ["9.6.6", "9.8.2", "9.10.1"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}

      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build --dry-run

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      # Cache dependencies here so that we do not have to rebuild them should
      # the subsequent steps fail.
      - name: Cache dependencies
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache will error
        # because of a key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: cabal build all

      - name: Run tests
        run: cabal test all

      - name: Check Cabal file
        run: cabal check
